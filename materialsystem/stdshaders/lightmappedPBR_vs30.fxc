//  STATIC: "BUMPMAP"					"0..1"
//  STATIC: "DIFFUSEBUMPMAP"			"0..1"
//  STATIC: "VERTEXCOLOR"				"0..1"
//  STATIC: "VERTEXALPHATEXBLENDFACTOR"	"0..1"

//  DYNAMIC: "FASTPATH"					"0..1"
//	DYNAMIC: "DOWATERFOG"				"0..1"

// This should not be a combo since I'm a moron with the tangent space and the flashlight.
//  SKIP: !$BUMPMAP && $DIFFUSEBUMPMAP

#include "common_vs_fxc.h"

static const int g_FogType						= DOWATERFOG;
static const bool g_bBumpmap					= BUMPMAP;
static const bool g_bBumpmapDiffuseLighting		= DIFFUSEBUMPMAP;
static const bool g_bVertexColor				= VERTEXCOLOR;
static const bool g_bVertexAlphaTexBlendFactor	= VERTEXALPHATEXBLENDFACTOR;

const float4 SeamlessScale                      : register( SHADER_SPECIFIC_CONST_0 );
#define SEAMLESS_SCALE (SeamlessScale.x)

const float4 cBaseTexCoordTransform[2]			:  register( SHADER_SPECIFIC_CONST_2 );

const float4x4 g_FlashlightWorldToTexture		:  register( SHADER_SPECIFIC_CONST_6 );

struct VS_INPUT
{
	float3 vPos							: POSITION;
	float4 vNormal						: NORMAL;
	float2 vBaseTexCoord				: TEXCOORD0;
	float2 vLightmapTexCoord			: TEXCOORD1;
	float2 vLightmapTexCoordOffset		: TEXCOORD2;
	float3 vTangentS					: TANGENT;
	float3 vTangentT					: BINORMAL;
	float4 vColor						: COLOR0;
};

struct VS_OUTPUT
{
    float4 projPos					: POSITION;	

	float3 SeamlessTexCoord         : TEXCOORD0;            // x y z 
	float2 baseTexCoord				: TEXCOORD1;
	float4 lightmapTexCoord1And2	: TEXCOORD2;
	float4 lightmapTexCoord3		: TEXCOORD3;			// and basetexcoord*mask_scale
	float4 worldPos_projPosZ		: TEXCOORD4;

	float3x3 TBN      				: TEXCOORD5;

	float4 vertexColor				: COLOR;				// in seamless, r g b = blend weights
	float4 vertexBlendX_fogFactorW	: COLOR1;

};

VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o = ( VS_OUTPUT )0;

	float3 vObjNormal;
	DecompressVertex_Normal( v.vNormal, vObjNormal );

	float3 worldPos = mul( float4( v.vPos, 1 ), cModel[0] );
	float4 vProjPos = mul( float4( v.vPos, 1 ), cModelViewProj );
	o.projPos = vProjPos;
	vProjPos.z = dot( float4( v.vPos, 1 ), cModelViewProjZ );
	o.worldPos_projPosZ = float4( worldPos, vProjPos.z );

	float3 worldNormal = mul3x3( v.vNormal, ( const float3x3 )cModel[0] );
	float3 worldTangentS = mul( v.vTangentS, ( const float3x3 )cModel[0] );
	float3 worldTangentT = mul( v.vTangentT, ( const float3x3 )cModel[0] );
	
	o.TBN[0] = worldTangentS;
	o.TBN[1] = worldTangentT;
	o.TBN[2] = worldNormal;

	float3 worldVertToEyeVector = VSHADER_VECT_SCALE * (cEyePos - worldPos);

	{
		// we need to fill in the texture coordinate projections
		o.SeamlessTexCoord = SEAMLESS_SCALE*worldPos;
	}
	{
		if (FASTPATH)
		{
			o.baseTexCoord.xy = v.vBaseTexCoord;
		}
		else
		{
			o.baseTexCoord.x = dot( v.vBaseTexCoord, cBaseTexCoordTransform[0] ) + cBaseTexCoordTransform[0].w;
			o.baseTexCoord.y = dot( v.vBaseTexCoord, cBaseTexCoordTransform[1] ) + cBaseTexCoordTransform[1].w;
		}
	}
	
	o.lightmapTexCoord3.zw = v.vBaseTexCoord;

	
	//  compute lightmap coordinates
	if( g_bBumpmap)
	{
		o.lightmapTexCoord1And2.xy = v.vLightmapTexCoord + v.vLightmapTexCoordOffset;

		float2 lightmapTexCoord2 = o.lightmapTexCoord1And2.xy + v.vLightmapTexCoordOffset;
		float2 lightmapTexCoord3 = lightmapTexCoord2 + v.vLightmapTexCoordOffset;

		// reversed component order
		o.lightmapTexCoord1And2.w = lightmapTexCoord2.x;
		o.lightmapTexCoord1And2.z = lightmapTexCoord2.y;

		o.lightmapTexCoord3.xy = lightmapTexCoord3;
	}
	else
	{
		o.lightmapTexCoord1And2.xy = v.vLightmapTexCoord;
	}

	o.vertexBlendX_fogFactorW = CalcFog( worldPos, vProjPos, g_FogType );

	if (!g_bVertexColor)
	{
		o.vertexColor = float4( 1.0f, 1.0f, 1.0f, cModulationColor.a );
	}
	else
	{
#if FASTPATH
		o.vertexColor = v.vColor;
#else
		if ( g_bVertexAlphaTexBlendFactor )
		{
			o.vertexColor.rgb = v.vColor.rgb;
			o.vertexColor.a = cModulationColor.a;
		}
		else
		{
			o.vertexColor = v.vColor;
			o.vertexColor.a *= cModulationColor.a;
		}
#endif
	}
	// compute belnd weights in rgb
	float3 vNormal=normalize( worldNormal );
	o.vertexColor.xyz = vNormal * vNormal;           // sums to 1.

	if ( g_bVertexAlphaTexBlendFactor )
	{
		o.vertexBlendX_fogFactorW.r = v.vColor.a;
	}
	
	return o;
}