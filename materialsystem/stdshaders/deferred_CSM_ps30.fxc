// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps20b][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB" "0..0"	[= 0] [XBOX]

#define HDRTYPE HDR_TYPE_NONE
#include "common_ps_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_pbr.h"
#include "common_deferred.h"
#include "deferred_shadows.h"

#define PI 3.1415926

sampler FBSampler			: register( s0 );
sampler AlbedoSampler		: register( s1 );
sampler ViewPosSampler		: register( s2 );
sampler ViewNormalSampler	: register( s3 );
sampler MetallicRoughnessSampler    	: register( s4 );
sampler AOSampler			: register( s5 );
sampler DepthSampler    	: register( s6 );
sampler ShadowDepthSampler  : register( s7 );

const float2 g_resolution						: register( c1 );
const float3 g_EyePos							: register( c2 );
const float3 g_ZDist							: register( c3 );
const float4x4 g_FlashlightWorldToTexture		: register( c4 );
const float4 g_CascadeFwd						:  register( c8 );
const float4 g_CascadeLight						:  register( c9 );
const float4 g_CascadeAmbient					:  register( c10 );

const float2 g_CascadeBias						:  register( c11 );
const float2 g_CascadeResolution				:  register( c12 );
const float4 g_CascadeSize						:  register( c13 );

#define SLOPESCALE g_CascadeBias.x
#define DEPTHBIAS g_CascadeBias.y

#define CascadeSize g_CascadeResolution

float DoCSM( sampler DepthSampler, const float3 vProjCoords, float vViewDepth, float LdN )
{
	float2 rtSize = CascadeSize;//float2(4096.0f * 4.0f, 4096.0f) * 2.0f;
	float fEpsilonX    = 1.0f / rtSize.y;
	float fEpsilonY    = 1.0f / rtSize.x;

	float3 cascade0 = float3( float2((vProjCoords.x / 4), vProjCoords.y), vProjCoords.z);
	float3 cascade1 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.y - 2 - 1.0f/8.0f - 0.5), vProjCoords.y + (g_CascadeSize.y - 1) / 2) / g_CascadeSize.y, vProjCoords.z);
	float3 cascade2 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.z - 3 - 1.0f/8.0f), vProjCoords.y + (g_CascadeSize.z - 1) / 2) / g_CascadeSize.z, vProjCoords.z);
	float3 cascade3 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.w - 4 - 1.0f/8.0f), vProjCoords.y + (g_CascadeSize.w - 1) / 2) / g_CascadeSize.w, vProjCoords.z);

	float projMask = 1.0f;
	if(vViewDepth >= g_CascadeSize.w * g_CascadeSize.x - 100)
	{
		projMask = 0.0f;
	}
	
	float4 vShadowTweaks = float4(fEpsilonX, fEpsilonY, 0.0f, 0.0f);
	
	float shadowProjDiff0 = 1;
	float3 shadowMapCenter_objDepth0 = cascade0;
	float2 shadowMapCenter0 = shadowMapCenter_objDepth0.xy;
	float objDepth0 = shadowMapCenter_objDepth0.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff0;
	float3 vShadowPos0 = float3(shadowMapCenter0, objDepth0);
	
	float shadowProjDiff1 = g_CascadeSize.y;
	float3 shadowMapCenter_objDepth1 = cascade1;
	float2 shadowMapCenter1 = shadowMapCenter_objDepth1.xy;
	float objDepth1 = shadowMapCenter_objDepth1.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff1;
	float3 vShadowPos1 = float3(shadowMapCenter1, objDepth1);
	
	float shadowProjDiff2 = g_CascadeSize.z;
	float3 shadowMapCenter_objDepth2 = cascade2;
	float2 shadowMapCenter2 = shadowMapCenter_objDepth2.xy;
	float objDepth2 = shadowMapCenter_objDepth2.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff2;
	float3 vShadowPos2 = float3(shadowMapCenter2, objDepth2);
	
	float shadowProjDiff3 = g_CascadeSize.w;
	float3 shadowMapCenter_objDepth3 = cascade3;
	float2 shadowMapCenter3 = shadowMapCenter_objDepth3.xy;
	float objDepth3 = shadowMapCenter_objDepth3.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff3;
	float3 vShadowPos3 = float3(shadowMapCenter3, objDepth3);

	float shadow0 = PCF(DepthSampler,rtSize, shadowMapCenter0.xy, objDepth0);
	float shadow1 = PCF(DepthSampler,rtSize, shadowMapCenter1.xy, objDepth1);
	float shadow2 = PCF(DepthSampler,rtSize, shadowMapCenter2.xy, objDepth2);
	float shadow3 = PCF(DepthSampler,rtSize, shadowMapCenter3.xy, objDepth3);

	/*float shadow0 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos0, vShadowTweaks);
	float shadow1 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos1, vShadowTweaks);
	float shadow2 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos2, vShadowTweaks);
	float shadow3 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos3, vShadowTweaks);

	float shadow0 = DoShadowRAWZ(DepthSampler, float4(vShadowPos0, 1.0f));
	float shadow1 = DoShadowRAWZ(DepthSampler, float4(vShadowPos1, 1.0f));
	float shadow2 = DoShadowRAWZ(DepthSampler, float4(vShadowPos2, 1.0f));
	float shadow3 = DoShadowRAWZ(DepthSampler, float4(vShadowPos3, 1.0f));*/


	float shadow01 = lerp(shadow0,shadow1,pow(saturate(vViewDepth / (g_CascadeSize.x - 6)), 20.0f));
	float shadow012 = lerp(shadow01,shadow2,pow(saturate(vViewDepth / (g_CascadeSize.y * g_CascadeSize.x - 6)), 20.0f));
	float shadow0123 = lerp(shadow012,shadow3,pow(saturate(vViewDepth / (g_CascadeSize.z * g_CascadeSize.x - 6)), 20.0f));

	float shadow = shadow0123;

	if(projMask == 1.0f)
	{
		float smoothCSMMask = pow(saturate(vViewDepth / (g_CascadeSize.w * g_CascadeSize.x - 100)), 20.0f);
		float shadowFinal = lerp(shadow, 1.0f, smoothCSMMask);
		return shadowFinal;
	}
	else
	{
		return 1.0f;
	}
	
}

float3 DoPBRCSM(in float3 worldPos, in float3 worldNormal, float3 albedo, float metallic, float roughness, float ViewZ)
{
	float3 Out;
	float LdN = max(1.0f - saturate(dot(worldNormal, -g_CascadeFwd.xyz)), 0.01);
	float4 flashlightSpacePosition = mul( float4( worldPos, 1.0f ), g_FlashlightWorldToTexture );
	float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;
	float3 flShadow = DoCSM(ShadowDepthSampler, vProjCoords, ViewZ, LdN);
	float diffuse = dot(worldNormal, -g_CascadeFwd.xyz);
	diffuse = saturate(diffuse);

	
	Out = DoPBRLight(worldPos, worldNormal, albedo, (-g_CascadeFwd.xyz * 4096) + g_EyePos, g_CascadeLight, g_EyePos, flShadow, metallic, roughness);
	return Out;
}

struct PS_INPUT
{
	float2 texCoord				: TEXCOORD0;
	float4x4 viewProj			: TEXCOORD2;
};

float4 main( PS_INPUT i ) : COLOR
{
	float3 fbSample = tex2D( FBSampler, i.texCoord ).rgb;
	float3 AlbedoSample = tex2D( AlbedoSampler, i.texCoord ).rgb;
	float3 worldPos = tex2D( ViewPosSampler, i.texCoord ).rgb + g_EyePos;
	float3 worldNormal = tex2D( ViewNormalSampler, i.texCoord ).rgb;
	worldNormal = unpackNormals(worldNormal);
	float3 metallicRoughnessDepth = tex2D( MetallicRoughnessSampler, i.texCoord ).rgb;
	float3 AOSample = tex2D( AOSampler, i.texCoord ).rgb;    // Samples
	float depth = metallicRoughnessDepth.z;
	float ProjectionDepth = depth * (g_ZDist.y / g_ZDist.x);

	float3 ambient = DoAmbient(i.texCoord, worldPos, worldNormal, g_EyePos, metallicRoughnessDepth.y, AlbedoSample, g_CascadeAmbient, g_CascadeLight / (PI * PI));
	
	float3 lighting = DoPBRCSM(worldPos, worldNormal, AlbedoSample, metallicRoughnessDepth.x, metallicRoughnessDepth.y, length(worldPos - g_EyePos));

	return FinalOutput( float4( lighting + ambient, 1.0f ), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
}
