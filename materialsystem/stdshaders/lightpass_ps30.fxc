//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Example pixel shader that can be applied to models
//
//==================================================================================================

// STATIC: "CONVERT_TO_SRGB"	"0..0"
// STATIC: "BUMPMAP"			"0..1"
// STATIC: "BASETEXTURE2"		"0..1"
// STATIC: "SEAMLESS"           "0..1"
// STATIC: "DECAL"				"0..1"
// STATIC: "MODEL"				"0..1"
// STATIC: "SMOOTHNESS"			"0..1"

// DYNAMIC: "PERF"			"0..2"

#include "common_deferred.h"
#include "common_flashlight_fxc.h"
#include "shader_constant_register_map.h"
#include "common_lightmappedgeneric_fxc.h"

#include "common_pbr.h"
#include "deferred_shadows.h"

sampler BaseTextureSampler		: register( s1 );	// Albedo
sampler RandDotSampler			: register( s2 );	// random noise sampler
sampler NormalMapSampler		: register( s3 );	// Normal Map sampler
sampler RoughnessSampler		: register( s4 );	// Roughness
sampler MetallicSampler			: register( s5 );	// Metallic

sampler NormalMap2Sampler		: register( s6 );	// WorldVertexTransition
sampler BaseTexture2Sampler		: register( s7);	// WorldVertexTransition

sampler ShadowDepthSampler		: register( s8);	// CSM Depth

const float4 g_EyePos							: register( c5 );

const float4x4 g_FlashlightWorldToTexture		: register( c6 );
const float4 g_CascadeFwd						:  register( c10 );
const float4 g_CascadeLight						:  register( c11 );
const float4 g_CascadeAmbient					:  register( c12 );

const float2 g_CascadeBias						:  register( c13 );
const float2 g_CascadeResolution				:  register( c14 );
const float4 g_CascadeSize						:  register( c15 );

static const bool g_bBump					= BUMPMAP ? true : false;
static const bool g_bBaseTexture2			= (BASETEXTURE2 && !MODEL) ? true : false;

#define SLOPESCALE g_CascadeBias.x
#define DEPTHBIAS g_CascadeBias.y
#define CascadeSize g_CascadeResolution

float DoCSM( sampler DepthSampler, const float3 vProjCoords, float vViewDepth, float LdN )
{
	float2 rtSize = CascadeSize;//float2(4096.0f * 4.0f, 4096.0f) * 2.0f;
	float fEpsilonX    = 1.0f / rtSize.y;
	float fEpsilonY    = 1.0f / rtSize.x;

#if PERF < 1
	float3 cascade0 = float3( float2((vProjCoords.x / 4), vProjCoords.y), vProjCoords.z);
	float3 cascade1 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.y - 2 - 1.0f/8.0f - 0.5), vProjCoords.y + (g_CascadeSize.y - 1) / 2) / g_CascadeSize.y, vProjCoords.z);
#endif
#if PERF < 2
	float3 cascade2 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.z - 3 - 1.0f/8.0f), vProjCoords.y + (g_CascadeSize.z - 1) / 2) / g_CascadeSize.z, vProjCoords.z);
#endif
	float3 cascade3 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.w - 4 - 1.0f/8.0f), vProjCoords.y + (g_CascadeSize.w - 1) / 2) / g_CascadeSize.w, vProjCoords.z);

	float projMask = 1.0f;
	if(vViewDepth >= g_CascadeSize.w * g_CascadeSize.x - 100)
	{
		projMask = 0.0f;
	}
	
	float4 vShadowTweaks = float4(fEpsilonX, fEpsilonY, 0.0f, 0.0f);
#if PERF < 1
	float shadowProjDiff0 = 1;
	float3 shadowMapCenter_objDepth0 = cascade0;
	float2 shadowMapCenter0 = shadowMapCenter_objDepth0.xy;
	float objDepth0 = shadowMapCenter_objDepth0.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff0;
	float3 vShadowPos0 = float3(shadowMapCenter0, objDepth0);
	
	float shadowProjDiff1 = g_CascadeSize.y;
	float3 shadowMapCenter_objDepth1 = cascade1;
	float2 shadowMapCenter1 = shadowMapCenter_objDepth1.xy;
	float objDepth1 = shadowMapCenter_objDepth1.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff1;
	float3 vShadowPos1 = float3(shadowMapCenter1, objDepth1);
#endif

#if PERF < 2
	float shadowProjDiff2 = g_CascadeSize.z;
	float3 shadowMapCenter_objDepth2 = cascade2;
	float2 shadowMapCenter2 = shadowMapCenter_objDepth2.xy;
	float objDepth2 = shadowMapCenter_objDepth2.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff2;
	float3 vShadowPos2 = float3(shadowMapCenter2, objDepth2);
#endif

	float shadowProjDiff3 = g_CascadeSize.w;
	float3 shadowMapCenter_objDepth3 = cascade3;
	float2 shadowMapCenter3 = shadowMapCenter_objDepth3.xy;
	float objDepth3 = shadowMapCenter_objDepth3.z + DEPTHBIAS * (SLOPESCALE * LdN) * shadowProjDiff3;
	float3 vShadowPos3 = float3(shadowMapCenter3, objDepth3);

	/*float shadow0 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter0.xy, objDepth0);
	float shadow1 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter1.xy, objDepth1);
	float shadow2 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter2.xy, objDepth2);
	float shadow3 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter3.xy, objDepth3);*/
	
	float shadow3 = PCF(DepthSampler,rtSize, shadowMapCenter3.xy, objDepth3);

#if PERF < 2
	float shadow2 = PCF(DepthSampler,rtSize, shadowMapCenter2.xy, objDepth2);
#else
	float shadow2 = shadow3;
#endif

#if PERF < 1
	float shadow1 = PCF(DepthSampler,rtSize, shadowMapCenter1.xy, objDepth1);
	float shadow0 = PCF(DepthSampler,rtSize, shadowMapCenter0.xy, objDepth0);
#else
	float shadow1 = shadow2;
	float shadow0 = shadow2;
#endif


	/*float shadow0 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos0, vShadowTweaks);
	float shadow1 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos1, vShadowTweaks);
	float shadow2 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos2, vShadowTweaks);
	float shadow3 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos3, vShadowTweaks);

	float shadow0 = DoShadowRAWZ(DepthSampler, float4(vShadowPos0, 1.0f));
	float shadow1 = DoShadowRAWZ(DepthSampler, float4(vShadowPos1, 1.0f));
	float shadow2 = DoShadowRAWZ(DepthSampler, float4(vShadowPos2, 1.0f));
	float shadow3 = DoShadowRAWZ(DepthSampler, float4(vShadowPos3, 1.0f));*/


	float shadow01 = lerp(shadow0,shadow1,pow(saturate(vViewDepth / (g_CascadeSize.x - 6)), 20.0f));
	float shadow012 = lerp(shadow01,shadow2,pow(saturate(vViewDepth / (g_CascadeSize.y * g_CascadeSize.x - 6)), 20.0f));
	float shadow0123 = lerp(shadow012,shadow3,pow(saturate(vViewDepth / (g_CascadeSize.z * g_CascadeSize.x - 6)), 20.0f));

	float shadow = shadow0123;

	if(projMask == 1.0f)
	{
		float smoothCSMMask = pow(saturate(vViewDepth / (g_CascadeSize.w * g_CascadeSize.x - 100)), 20.0f);
		float shadowFinal = lerp(shadow, 1.0f, smoothCSMMask);
		return shadowFinal;
	}
	else
	{
		return 1.0f;
	}
	
}

float3 DoPBRCSM(in float3 worldPos, in float3 worldNormal, float3 albedo, float metallic, float roughness, float ViewZ)
{
	float3 Out;
	float LdN = max(1.0f - saturate(dot(worldNormal, -g_CascadeFwd.xyz)), 0.01);
	float4 flashlightSpacePosition = mul( float4( worldPos, 1.0f ), g_FlashlightWorldToTexture );
	float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;
	float3 flShadow = DoCSM(ShadowDepthSampler, vProjCoords, ViewZ, LdN);
	float diffuse = dot(worldNormal, -g_CascadeFwd.xyz);
	diffuse = saturate(diffuse);

	Out = DoPBRLight(worldPos, worldNormal, albedo, (-g_CascadeFwd.xyz * 4096) + g_EyePos, g_CascadeLight, g_EyePos, flShadow, metallic, roughness);
	return Out;
}

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

struct PS_INPUT
{
	HALF2 baseTexCoord			: TEXCOORD0;
	// detail textures and bumpmaps are mutually exclusive so that we have enough texcoords.
	float3 worldNormal			: TEXCOORD2;
	float4 worldPos_Projz		: TEXCOORD3;
	float4 vWorldTangent		: TEXCOORD4;
	float3 vWorldBinormal		: TEXCOORD5;
	float4 projPos			: TEXCOORD6;
	HALF4 vertexColor			: COLOR;
};

PS_OUTPUT main( PS_INPUT i )
{
	PS_OUTPUT Out = (PS_OUTPUT)0;

	float4 basealbedo = tex2D( BaseTextureSampler, i.baseTexCoord.xy );
	
	float4 basealbedo2 = 0.0f;
	if ( g_bBaseTexture2 )
	{
		basealbedo2 = tex2D( BaseTexture2Sampler, i.baseTexCoord.xy );
	}
	
	float3 normalTexel  = tex2D( NormalMapSampler, i.baseTexCoord.xy );
	
	float blendfactor=i.vertexColor.r;	
	float3 albedo = basealbedo.rgb;
	if ( g_bBaseTexture2 )
	{
		albedo = lerp(basealbedo, basealbedo2, blendfactor).rgb;
	}
#if SMOOTHNESS == 0
	float roughnessMap = tex2D( RoughnessSampler, i.baseTexCoord.xy);
#else
	float roughnessMap = 1.0f - tex2D( RoughnessSampler, i.baseTexCoord.xy);
#endif
	float metallicMap = tex2D( MetallicSampler, i.baseTexCoord.xy);

	#if BUMPMAP
	float3 tangentSpaceNormal = normalTexel * 2.0f - 1.0f;
	float3 vWorldBinormal = i.vWorldBinormal;
	float3 vWorldNormal = Vec3TangentToWorld( tangentSpaceNormal, i.worldNormal, i.vWorldTangent, vWorldBinormal );
	vWorldNormal = normalize( vWorldNormal );
	#else
	float3 vWorldNormal = normalize( i.worldNormal );
	#endif
	
	float3 flFog = 0.0f;
	float alpha = basealbedo.a;

	float3 lighting = DoPBRCSM(i.worldPos_Projz.xyz, vWorldNormal, albedo, metallicMap, roughnessMap, length(i.worldPos_Projz.xyz - g_EyePos));

	Out.vColor_0 = FinalOutput( float4(lighting, alpha), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE, false, i.worldPos_Projz.w );

	return Out;
}
 
