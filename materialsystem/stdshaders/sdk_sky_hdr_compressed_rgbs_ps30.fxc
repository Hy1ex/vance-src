// STATIC: "CONVERT_TO_SRGB"			"0..1"	[= g_pHardwareConfig->NeedsShaderSRGBConversion()]
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..1"
#include "common_ps_fxc.h"

#if defined( SHADER_MODEL_PS_2_0 )
#	define WRITE_DEPTH_TO_DESTALPHA 0
#endif

sampler RGBSTextureSampler	: register( s0 );
HALF4 InputScale : register( c0 );

float2 texWidthHeight : register( c1 );

float4 texOffsets : register( c2 );

struct PS_INPUT
{
	float2 baseTexCoord00 : TEXCOORD0;
	float2 baseTexCoord01 : TEXCOORD1;
	float2 baseTexCoord10 : TEXCOORD2;
	float2 baseTexCoord11 : TEXCOORD3;
	float2 baseTexCoord_In_Pixels: TEXCOORD4;
};

float4 main( PS_INPUT i ) : COLOR
{
	float3 result;
	float4 s00 = tex2D(RGBSTextureSampler, i.baseTexCoord00); 
	float4 s10 = tex2D(RGBSTextureSampler, i.baseTexCoord10); 
	float4 s01 = tex2D(RGBSTextureSampler, i.baseTexCoord01); 
	float4 s11 = tex2D(RGBSTextureSampler, i.baseTexCoord11); 
	
	float2 fracCoord = frac(i.baseTexCoord_In_Pixels);

	s00.rgb*=s00.a;
	s10.rgb*=s10.a;

	s00.xyz = lerp(s00, s10, fracCoord.x); 
	
	s01.rgb*=s01.a;
	s11.rgb*=s11.a;
	s01.xyz = lerp(s01, s11, fracCoord.x); 
	
	result = lerp(s00, s01, fracCoord.y); 
 
	// This is never fogged.
	return FinalOutput( float4( InputScale*result, 1.0f ), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_LINEAR, WRITE_DEPTH_TO_DESTALPHA, 1e20 ); //when writing depth to dest alpha, write a value guaranteed to saturate
}
