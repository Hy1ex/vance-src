//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Example pixel shader that can be applied to models
//
//==================================================================================================

// STATIC: "CONVERT_TO_SRGB"			"0..0"
// STATIC: "FLASHLIGHT"					"0..1"
// STATIC: "CUBEMAP"					"0..1"
// STATIC: "CUBEMAP_SPHERE_LEGACY"		"0..1"
// STATIC: "SMOOTHNESS"					"0..1"
// STATIC: "SEAMLESS"                   "0..1"
// STATIC: "BUMPMAP"                    "0..1"

// DYNAMIC: "WRITEWATERFOGTODESTALPHA"  "0..1"
// DYNAMIC: "PIXELFOGTYPE"				"0..1"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..1"
// DYNAMIC: "FLASHLIGHTSHADOWS"			"0..1"
// DYNAMIC: "CUBEMAPCORRECTED"			"0..1"
// DYNAMIC: "CSM"						"0..1"
// DYNAMIC: "CSM_PERF"					"0..2"
// DYNAMIC: "LIGHT_PREVIEW"             "0..2"

// We don't care about those in the editor
// SKIP: ($CUBEMAP || FLASHLIGHT ) && $LIGHT_PREVIEW

// SKIP: ($PIXELFOGTYPE == 0) && ($WRITEWATERFOGTODESTALPHA != 0)

// We don't care about flashlight depth unless the flashlight is on
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTSHADOWS == 1 )

// SKIP: ( $CUBEMAP == 0 ) && ( $OLDIBL == 0 ) && ( $OLDIBL == 1 )
// SKIP: ( $FLASHLIGHT == 1 ) && ( $OLDIBL == 0 ) && ( $OLDIBL == 1 )
// SKIP: ( $CUBEMAP == 1 ) && ( $FLASHLIGHT == 1 )

// both cant exist at the same time
// SKIP: ( $FLASHLIGHT == 1) && ( $CSM == 1)

// SKIP: $CUBEMAP_SPHERE_LEGACY && ($CUBEMAP == 0)

#include "common_flashlight_fxc.h"
#include "shader_constant_register_map.h"
#include "common_pbr.h"
#include "deferred_shadows.h"
#include "common_lightmappedgeneric_fxc.h"

#ifdef NV3X
  #define PSHADER_VECT_SCALE 20.0
  #define VSHADER_VECT_SCALE (1.0 / (PSHADER_VECT_SCALE) )
#else
  #define PSHADER_VECT_SCALE 1.0
  #define VSHADER_VECT_SCALE 1.0
#endif

const float4 g_DiffuseModulation			: register( PSREG_DIFFUSE_MODULATION );
const float4 g_vShadowTweaks					: register( PSREG_ENVMAP_TINT__SHADOW_TWEAKS );
const float4 g_EyePos					: register( PSREG_EYEPOS_SPEC_EXPONENT );
const float4 g_FogParams					: register( PSREG_FOG_PARAMS );
#if FLASHLIGHT == 1
sampler ShadowDepthSampler		: register( s4 );	// Flashlight shadow depth map sampler
sampler FlashlightSampler		: register( s6 );	// Flashlight cookie

const float4 g_FlashlightAttenuationFactors	: register( PSREG_FLASHLIGHT_ATTENUATION );			// On non-flashlight pass
const float4 g_FlashlightPos_RimBoost		: register( PSREG_FLASHLIGHT_POSITION_RIM_BOOST );
const float4x4 g_FlashlightWorldToTexture	: register( PSREG_FLASHLIGHT_TO_WORLD_TEXTURE );
const float4 g_FlashlightColor				: register( PSREG_FLASHLIGHT_COLOR );
#elif CSM == 1
sampler ShadowDepthSampler					: register( s4 );	// CSM Depth

const float4x4 g_CSMWorldToTexture			:  register( c22 );
const float4 g_CascadeFwd					:  register( c26 );
const float4 g_CascadeLight					:  register( c27 );
const float4 g_CascadeAmbient				:  register( c28 );
const float2 g_CascadeBias					:  register( c31 );
const float2 g_CascadeResolution			:  register( c32 );
const float4 g_CascadeSize					:  register( c33 );
#endif
const float4 g_TintValuesAndLightmapScale	: register( c20 );
const float4 g_EnvmapOrigin_and_Radius		: register( c21 );
#define g_EnvmapOrigin (g_EnvmapOrigin_and_Radius.xyz)
#define g_EnvmapRadius (g_EnvmapOrigin_and_Radius.w)

#define g_FlashlightPos					g_FlashlightPos_RimBoost.xyz

sampler BaseTextureSampler		: register( s0 );	// Base map, selfillum in alpha
sampler RoughnessSampler		: register( s1 );	// Roughness
sampler MetallicSampler			: register( s2 );	// Metallic
sampler BumpmapSampler			: register( s3 );	// Bump map
sampler EnvmapSampler			: register( s7 );	// for IBL
sampler BRDFSampler				: register( s8 );	// for IBL
sampler AOSampler				: register( s9 );	// AO
sampler EmissiveSampler			: register( s10 );	// Emissive map
sampler LightmapSampler			: register( s11 );	// Lightmap texture from the engine

// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
half3 EnvBRDFApprox( half3 SpecularColor, half Roughness, half NoV )
{
	const half4 c0 = { -1, -0.0275, -0.572, 0.022 };
	const half4 c1 = { 1, 0.0425, 1.04, -0.04 };
	half4 r = Roughness * c0 + c1;
	half a004 = min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
	half2 AB = half2( -1.04, 1.04 ) * a004 + r.zw;
	return SpecularColor * AB.x + AB.y;
}

float3 fresnelSchlickRoughness(float cosTheta, float3 F0, float roughness)
{
    return F0 + (max(1.0f.xxx - roughness, F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

float3 DoIBL(float3 vWorldNormal, float3 vWorldPos, float3 albedo, float metallness, float roughness, float3 lightmap)
{
	float3 WorldToEye = g_EyePos.xyz - vWorldPos;
	float3 V = normalize( WorldToEye );
	float3 N = normalize( vWorldNormal );

	//precompute dots
    float NV = max(0.0, dot(normalize(N), V));
	
    float3 metallic = clamp(metallness, 0.0f, 0.9f);
#if CUBEMAP == 1

#if CUBEMAPCORRECTED == 0
		float3 reflectVect = CalcReflectionVectorUnnormalized( vWorldNormal, V );
#else
		float3 reflectVect = CalcReflectionVectorUnnormalized( vWorldNormal, WorldToEye);
		float3 BoxSize = float3(g_EnvmapRadius,g_EnvmapRadius,g_EnvmapRadius);
		float3 BoxMax = BoxSize + g_EnvmapOrigin;
		float3 BoxMin = -BoxSize + g_EnvmapOrigin;
		float3 firstPlaneIntersect = (BoxMax - vWorldPos) / reflectVect;
		float3 secondPlaneIntersect = (BoxMin - vWorldPos) / reflectVect;
		float3 furthestPlane = max(firstPlaneIntersect, secondPlaneIntersect);
		float planeDist = min(min(furthestPlane.x, furthestPlane.y), furthestPlane.z);
		float3 intersectPositionWS = vWorldPos + reflectVect * planeDist;
		reflectVect = intersectPositionWS - g_EnvmapOrigin;
#endif

	float4 directionPosX = { 1.0f, 0.01f, 0.01f, 12.0f }; float4 directionNegX = {-1.0f, 0.01f, 0.01f, 12.0f };
	float4 directionPosY = { 0.01f, 1.0f, 0.01f, 12.0f }; float4 directionNegY = { 0.01f,-1.0f, 0.01f, 12.0f };
	float4 directionPosZ = { 0.01f, 0.01f, 1.0f, 12.0f }; float4 directionNegZ = { 0.01f, 0.01f,-1.0f, 12.0f };
	float3 lookupPosX = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, directionPosX);
	float3 lookupNegX = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, directionNegX);
	float3 lookupPosY = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, directionPosY);
	float3 lookupNegY = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, directionNegY);
	float3 lookupPosZ = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, directionPosZ);
	float3 lookupNegZ = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, directionNegZ);
	float3 envmapCube[6] = { lookupPosX, lookupNegX, lookupPosY, lookupNegY, lookupPosZ, lookupNegZ };

	float3 irradiance = lightmap;

	float3 f0 = 0.04f.xxx;
	f0 = lerp(f0, albedo.rgb, metallic);
    float3 F = fresnelSchlickRoughness(NV, f0, roughness); // ambient Lighting Fresnel Term 

	half3 BRDF = EnvBRDFApprox(f0, roughness, NV);

	float3 kD = 1.0f.xxx - F;
	kD *= 1.0 - metallic;	

	float3 diffuseIBL = kD * albedo * irradiance;
	float3 lookup = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, float4(reflectVect, roughness * 12.0)).rgb;
	float3 specularIrradiance = lerp(lookup, PixelShaderAmbientLight( reflectVect, envmapCube ), roughness * roughness );
	float3 specularIBL = BRDF * specularIrradiance;

#if CUBEMAPCORRECTED == 1
		float fallof = saturate(length(g_EnvmapOrigin - vWorldPos) / g_EnvmapRadius);
		fallof = 1.0f - pow(fallof, 5.0f);
		specularIBL *= fallof;
#endif

    //mix
    return max(0.0, diffuseIBL + specularIBL);
#else

	float3 f0 = 0.04f.xxx;
	f0 = lerp(f0, albedo.rgb, metallic);
    float3 F = fresnelSchlickRoughness(NV, f0, roughness); // ambient Lighting Fresnel Term 

	float3 kD = 1.0f.xxx - F;
	kD *= 1.0 - metallic;	
    return kD * albedo * lightmap;
#endif
}

#if FLASHLIGHT == 1
float3 DoFlashlight(float3 vWorldNormal, float3 vWorldPos, float3 albedo, float metallic, float roughness)
{
	float4 flashlightSpacePosition = mul( float4(vWorldPos, 1.0f ), g_FlashlightWorldToTexture );
	float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;
	float3 flashlightColor = tex2D( FlashlightSampler, vProjCoords);
	float3 shadow = 1.0f;
	#if FLASHLIGHTSHADOWS
	shadow = tex2DprojBicubic(ShadowDepthSampler, 512.0f.xx, vProjCoords.xy, vProjCoords.z);
	#endif
	float2 dist = float2(length(g_FlashlightPos_RimBoost.xyz - vWorldPos), dot(g_FlashlightPos_RimBoost.xyz - vWorldPos,g_FlashlightPos_RimBoost.xyz - vWorldPos));
	float fAtten = saturate( dot( g_FlashlightAttenuationFactors.xyz, float3( 1.0f, 1.0f/dist.x, 1.0f/dist.y ) ) );
	float3 light = DoPBRLight( vWorldPos, vWorldNormal, albedo, g_FlashlightPos_RimBoost.xyz, flashlightColor.rgb * g_FlashlightColor.xyz, g_EyePos.xyz, shadow * fAtten * g_FlashlightColor.w, metallic, roughness);
	return light;
}
#elif CSM == 1
float DoCSM( sampler DepthSampler, const float3 vProjCoords, float vViewDepth, float LdN )
{
	float2 rtSize = g_CascadeResolution;//float2(4096.0f * 4.0f, 4096.0f) * 2.0f;
	float fEpsilonX    = 1.0f / rtSize.y;
	float fEpsilonY    = 1.0f / rtSize.x;

#if CSM_PERF < 1
	float3 cascade0 = float3( float2((vProjCoords.x / 4), vProjCoords.y), vProjCoords.z);
	float3 cascade1 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.y - 2 - 1.0f/8.0f - 0.5), vProjCoords.y + (g_CascadeSize.y - 1) / 2) / g_CascadeSize.y, vProjCoords.z);
#endif
#if CSM_PERF < 2
	float3 cascade2 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.z - 3 - 1.0f/8.0f), vProjCoords.y + (g_CascadeSize.z - 1) / 2) / g_CascadeSize.z, vProjCoords.z);
#endif
	float3 cascade3 = float3( float2((vProjCoords.x / 4) + (g_CascadeSize.w - 4 - 1.0f/8.0f), vProjCoords.y + (g_CascadeSize.w - 1) / 2) / g_CascadeSize.w, vProjCoords.z);

	float projMask = 1.0f;
	if(vViewDepth >= g_CascadeSize.w * g_CascadeSize.x - 100)
	{
		projMask = 0.0f;
	}
	
	float4 vShadowTweaks = float4(fEpsilonX, fEpsilonY, 0.0f, 0.0f);
#if CSM_PERF < 1
	float shadowProjDiff0 = 1;
	float3 shadowMapCenter_objDepth0 = cascade0;
	float2 shadowMapCenter0 = shadowMapCenter_objDepth0.xy;
	float objDepth0 = shadowMapCenter_objDepth0.z + g_CascadeBias.y * (g_CascadeBias.x * LdN) * shadowProjDiff0;
	float3 vShadowPos0 = float3(shadowMapCenter0, objDepth0);
	
	float shadowProjDiff1 = g_CascadeSize.y;
	float3 shadowMapCenter_objDepth1 = cascade1;
	float2 shadowMapCenter1 = shadowMapCenter_objDepth1.xy;
	float objDepth1 = shadowMapCenter_objDepth1.z + g_CascadeBias.y * (g_CascadeBias.x * LdN) * shadowProjDiff1;
	float3 vShadowPos1 = float3(shadowMapCenter1, objDepth1);
#endif

#if CSM_PERF < 2
	float shadowProjDiff2 = g_CascadeSize.z;
	float3 shadowMapCenter_objDepth2 = cascade2;
	float2 shadowMapCenter2 = shadowMapCenter_objDepth2.xy;
	float objDepth2 = shadowMapCenter_objDepth2.z + g_CascadeBias.y * (g_CascadeBias.x * LdN) * shadowProjDiff2;
	float3 vShadowPos2 = float3(shadowMapCenter2, objDepth2);
#endif

	float shadowProjDiff3 = g_CascadeSize.w;
	float3 shadowMapCenter_objDepth3 = cascade3;
	float2 shadowMapCenter3 = shadowMapCenter_objDepth3.xy;
	float objDepth3 = shadowMapCenter_objDepth3.z + g_CascadeBias.y * (g_CascadeBias.x * LdN) * shadowProjDiff3;
	float3 vShadowPos3 = float3(shadowMapCenter3, objDepth3);

	/*float shadow0 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter0.xy, objDepth0);
	float shadow1 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter1.xy, objDepth1);
	float shadow2 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter2.xy, objDepth2);
	float shadow3 = tex2DprojBilinear(DepthSampler,rtSize, shadowMapCenter3.xy, objDepth3);*/
	
	float shadow3 = PCF(DepthSampler,rtSize, shadowMapCenter3.xy, objDepth3);

#if CSM_PERF < 2
	float shadow2 = PCF(DepthSampler,rtSize, shadowMapCenter2.xy, objDepth2);
#else
	float shadow2 = shadow3;
#endif

#if CSM_PERF < 1
	float shadow1 = PCF(DepthSampler,rtSize, shadowMapCenter1.xy, objDepth1);
	float shadow0 = PCF(DepthSampler,rtSize, shadowMapCenter0.xy, objDepth0);
#else
	float shadow1 = shadow2;
	float shadow0 = shadow2;
#endif


	/*float shadow0 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos0, vShadowTweaks);
	float shadow1 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos1, vShadowTweaks);
	float shadow2 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos2, vShadowTweaks);
	float shadow3 = DoShadowNvidiaPCF5x5GaussianEx(DepthSampler, vShadowPos3, vShadowTweaks);

	float shadow0 = DoShadowRAWZ(DepthSampler, float4(vShadowPos0, 1.0f));
	float shadow1 = DoShadowRAWZ(DepthSampler, float4(vShadowPos1, 1.0f));
	float shadow2 = DoShadowRAWZ(DepthSampler, float4(vShadowPos2, 1.0f));
	float shadow3 = DoShadowRAWZ(DepthSampler, float4(vShadowPos3, 1.0f));*/


	float shadow01 = lerp(shadow0,shadow1,pow(saturate(vViewDepth / (g_CascadeSize.x - 6)), 20.0f));
	float shadow012 = lerp(shadow01,shadow2,pow(saturate(vViewDepth / (g_CascadeSize.y * g_CascadeSize.x - 6)), 20.0f));
	float shadow0123 = lerp(shadow012,shadow3,pow(saturate(vViewDepth / (g_CascadeSize.z * g_CascadeSize.x - 6)), 20.0f));

	float shadow = shadow0123;

	if(projMask == 1.0f)
	{
		float smoothCSMMask = pow(saturate(vViewDepth / (g_CascadeSize.w * g_CascadeSize.x - 100)), 20.0f);
		float shadowFinal = lerp(shadow, 1.0f, smoothCSMMask);
		return shadowFinal;
	}
	else
	{
		return 1.0f;
	}
	
}

float3 DoPBRCSM(in float3 worldPos, in float3 worldNormal, float3 albedo, float metallic, float roughness, float ViewZ)
{
    float3 Out;
    float LdN = max(1.0f - saturate(dot(worldNormal, -g_CascadeFwd.xyz)), 0.01);
    float4 flashlightSpacePosition = mul(float4(worldPos, 1.0f), g_CSMWorldToTexture);
    float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;
    float3 flShadow = DoCSM(ShadowDepthSampler, vProjCoords, ViewZ, LdN);
    float diffuse = dot(worldNormal, -g_CascadeFwd.xyz);
    diffuse = saturate(diffuse);

    Out = DoPBRLight(worldPos, worldNormal, albedo, (-g_CascadeFwd.xyz * 4096) + g_EyePos, g_CascadeLight, g_EyePos, flShadow, metallic, roughness);
    return Out;
}
#endif
struct PS_INPUT
{
	float3 SeamlessTexCoord         : TEXCOORD0;            // x y z 
	float2 baseTexCoord				: TEXCOORD1;
	float4 lightmapTexCoord1And2	: TEXCOORD2;
	float4 lightmapTexCoord3		: TEXCOORD3;			// and basetexcoord*mask_scale
	float4 worldPos_projPosZ		: TEXCOORD4;
    
	float3x3 TBN      				: TEXCOORD5;

	float4 vertexColor				: COLOR;				// in seamless, r g b = blend weights
	float4 vertexBlendX_fogFactorW	: COLOR1;

};

struct PS_OUTPUT
{
    float4 MainOut : COLOR0;
    float4 Normal : COLOR1;
    float4 MRAO : COLOR2;
    float4 Albedo : COLOR3;
};

#if LIGHT_PREVIEW == 2
LPREVIEW_PS_OUT main( PS_INPUT i ) : COLOR
#elif LIGHT_PREVIEW == 1
HALF4 main(PS_INPUT i) : COLOR
#else
PS_OUTPUT main(PS_INPUT i) : COLOR
#endif
{
	bool bBumpmap = BUMPMAP ? true : false;
	bool bCubemap = (CUBEMAP) ? true : false;
	float3 UV = 0.0f.xxx;
#if SEAMLESS == 0
	UV.xy = i.baseTexCoord.xy;
#else
    UV = i.SeamlessTexCoord;
#endif
	float3 worldPos = i.worldPos_projPosZ.xyz;
#if SMOOTHNESS == 0
	float  roughnessMap = tex2D( RoughnessSampler, UV.xy );
#else
	float  roughnessMap = 1.0f - tex2D( RoughnessSampler, UV.xy );
#endif
	float  metallicMap = tex2D( MetallicSampler, UV.xy );
	float  AOSample = tex2D( AOSampler, UV.xy );
	float3  EmissiveSample = tex2D( EmissiveSampler, UV.xy );
	float4 baseColor = tex2D( BaseTextureSampler, UV.xy );
	float4 baseColor2 = 0.0f.xxxx;
	float4 normalTexel = 0.0f.xxxx;
	GetBaseTextureAndNormal( BaseTextureSampler, BaseTextureSampler, BumpmapSampler, false, bBumpmap, 
		UV, i.vertexColor.rgb, baseColor, baseColor2, normalTexel );

	float3 tangentSpaceNormal = normalTexel * 2.0f - 1.0f;

	float3 vWorldNormal = mul( tangentSpaceNormal, i.TBN );
	
    PS_OUTPUT output = (PS_OUTPUT)0;
    
	HALF3 lightmapColor1 = HALF3( 1.0f, 1.0f, 1.0f );
	HALF3 lightmapColor2 = HALF3( 1.0f, 1.0f, 1.0f );
	HALF3 lightmapColor3 = HALF3( 1.0f, 1.0f, 1.0f );
    if( bBumpmap)
	{
		HALF2 bumpCoord1;
		HALF2 bumpCoord2;
		HALF2 bumpCoord3;
		ComputeBumpedLightmapCoordinates( i.lightmapTexCoord1And2, i.lightmapTexCoord3.xy,
			bumpCoord1, bumpCoord2, bumpCoord3 );
		
		lightmapColor1 = LightMapSample( LightmapSampler, bumpCoord1 );
		lightmapColor2 = LightMapSample( LightmapSampler, bumpCoord2 );
		lightmapColor3 = LightMapSample( LightmapSampler, bumpCoord3 );
	}
	else
	{
		HALF2 bumpCoord1 = ComputeLightmapCoordinates( i.lightmapTexCoord1And2, i.lightmapTexCoord3.xy );
		lightmapColor1 = LightMapSample( LightmapSampler, bumpCoord1 );
	}
	float3 lightmapTexel = 1.0f;
	if(bBumpmap)
	{
		float3 dp;
		dp.x = saturate( dot( tangentSpaceNormal, bumpBasis[0] ) );
		dp.y = saturate( dot( tangentSpaceNormal, bumpBasis[1] ) );
		dp.z = saturate( dot( tangentSpaceNormal, bumpBasis[2] ) );
		dp *= dp;
			
		lightmapTexel = dp.x * lightmapColor1 +
						dp.y * lightmapColor2 +
						dp.z * lightmapColor3;
		float sum = dot( dp, float3( 1.0f, 1.0f, 1.0f ) );
		lightmapTexel *= 1.0f / sum;
	}
	else
	{
		lightmapTexel = lightmapColor1;
	}
	
    lightmapTexel *= g_TintValuesAndLightmapScale.rgb;

	//HALF2 lightmapCoord = ComputeLightmapCoordinates( i.lightmapTexCoord1And2, i.lightmapTexCoord3.xy );
	//float3 lightmapTexel = LightMapSample( LightmapSampler, lightmapCoord )* g_TintValuesAndLightmapScale.rgb;

	float3 albedo = g_DiffuseModulation.rgb * baseColor.rgb;

	float3 IBL = DoIBL(vWorldNormal, worldPos, baseColor.rgb, metallicMap, roughnessMap, lightmapTexel);
	float3 Flashlight = 0.0f;
#if FLASHLIGHT
	Flashlight = DoFlashlight(vWorldNormal, worldPos, baseColor.rgb, metallicMap, roughnessMap);
	float3 result = (Flashlight);
#elif CSM == 1
	float3 CSMLight = DoPBRCSM(worldPos, vWorldNormal, baseColor.rgb, metallicMap, roughnessMap, length(worldPos - g_EyePos));
	float3 result = (IBL * AOSample) + EmissiveSample + CSMLight;
#else
	float3 result = (IBL * AOSample) + EmissiveSample;
#endif
	float alpha = baseColor.a * g_DiffuseModulation.a;

	float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos.z, worldPos.z, i.worldPos_projPosZ.w );

#if WRITEWATERFOGTODESTALPHA && ( PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT )
	alpha = fogFactor;
#endif

#if LIGHT_PREVIEW == 1
	result = DoPBRLight(worldPos, i.TBN[2].xyz, baseColor, g_EyePos.xyz, 1.0f.xxx, g_EyePos.xyz, 5.0f, metallicMap, roughnessMap);
	bool bWriteDepthToAlpha = ( WRITE_DEPTH_TO_DESTALPHA != 0 ) && ( WRITEWATERFOGTODESTALPHA == 0 );
	return FinalOutput( float4( result.rgb, alpha), fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, i.worldPos_projPosZ.w );
#elif LIGHT_PREVIEW == 2
	LPREVIEW_PS_OUT Output;
	Output.color = float4( baseColor.xyz,alpha );
	Output.normal = float4( i.TBN[2].xyz,alpha );
	Output.position = float4( worldPos, alpha );
	Output.flags = float4( 1.0f - metallicMap, roughnessMap, 1, alpha );
	return FinalOutput( Output, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#else
	bool bWriteDepthToAlpha = ( WRITE_DEPTH_TO_DESTALPHA != 0 ) && ( WRITEWATERFOGTODESTALPHA == 0 );
    output.MainOut = FinalOutput(float4(result.rgb, alpha), fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, i.worldPos_projPosZ.w);
#if !FLASHLIGHT
    output.Normal = float4(vWorldNormal.xyz, 1.0f);
    output.MRAO = float4(metallicMap, roughnessMap, AOSample, 1.0f);
    output.Albedo = float4(baseColor.xyz, 1.0f);
#endif
	
    return output;
#endif
}
